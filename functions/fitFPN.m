function [fitresult, gof] = fitFPN(xi_deg, yi_pdk, xo_deg, yo_pdk)
%CREATEFITS(XI_DEG,YI_PDK,XO_DEG,YO_PDK)
%  Create fits.
%
%  Data for 'fpn-id-poly' fit:
%      X Input : xi_deg
%      Y Output: yi_pdk
%  Data for 'fpn-id-power' fit:
%      X Input : xi_deg
%      Y Output: yi_pdk
%  Data for 'fpn-id-exp' fit:
%      X Input : xi_deg
%      Y Output: yi_pdk
%  Data for 'fpn-id-gauss' fit:
%      X Input : xi_deg
%      Y Output: yi_pdk
%  Data for 'fpn-od-poly' fit:
%      X Input : xo_deg
%      Y Output: yo_pdk
%  Data for 'fpn-od-power' fit:
%      X Input : xo_deg
%      Y Output: yo_pdk
%  Data for 'fpn-od-exp' fit:
%      X Input : xo_deg
%      Y Output: yo_pdk
%  Data for 'fpn-od-gauss' fit:
%      X Input : xo_deg
%      Y Output: yo_pdk
%  Output:
%      fitresult : a cell-array of fit objects representing the fits.
%      gof : structure array with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 15-Sep-2019 20:56:37

%% Initialization.

% Initialize arrays to store fits and goodness-of-fit.
fitresult = cell( 8, 1 );
gof = struct( 'sse', cell( 8, 1 ), ...
    'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );

%% Fit: 'fpn-id-poly'.
[xData, yData] = prepareCurveData( xi_deg, yi_pdk );

% Set up fittype and options.
ft = fittype( 'poly1' );

% Fit model to data.
[fitresult{1}, gof(1)] = fit( xData, yData, ft );

% Plot fit with data.
figure( 'Name', 'fpn-id-poly' );
h = plot( fitresult{1}, xData, yData );
legend( h, 'yi_pdk vs. xi_deg', 'fpn-id-poly', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'xi_deg', 'Interpreter', 'none' );
ylabel( 'yi_pdk', 'Interpreter', 'none' );
grid on

%% Fit: 'fpn-id-power'.
[xData, yData] = prepareCurveData( xi_deg, yi_pdk );

% Set up fittype and options.
ft = fittype( 'power1' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [1.39709464513798 -0.458641338954968];

% Fit model to data.
[fitresult{2}, gof(2)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'fpn-id-power' );
h = plot( fitresult{2}, xData, yData );
legend( h, 'yi_pdk vs. xi_deg', 'fpn-id-power', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'xi_deg', 'Interpreter', 'none' );
ylabel( 'yi_pdk', 'Interpreter', 'none' );
grid on

%% Fit: 'fpn-id-exp'.
[xData, yData] = prepareCurveData( xi_deg, yi_pdk );

% Set up fittype and options.
ft = fittype( 'exp1' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [1.49879279263521 -0.100532976891975];

% Fit model to data.
[fitresult{3}, gof(3)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'fpn-id-exp' );
h = plot( fitresult{3}, xData, yData );
legend( h, 'yi_pdk vs. xi_deg', 'fpn-id-exp', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'xi_deg', 'Interpreter', 'none' );
ylabel( 'yi_pdk', 'Interpreter', 'none' );
grid on

%% Fit: 'fpn-id-gauss'.
[xData, yData] = prepareCurveData( xi_deg, yi_pdk );

% Set up fittype and options.
ft = fittype( 'gauss1' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.Lower = [-Inf -Inf 0];
opts.StartPoint = [0.966666666666667 2 6.52449217601913];

% Fit model to data.
[fitresult{4}, gof(4)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'fpn-id-gauss' );
h = plot( fitresult{4}, xData, yData );
legend( h, 'yi_pdk vs. xi_deg', 'fpn-id-gauss', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'xi_deg', 'Interpreter', 'none' );
ylabel( 'yi_pdk', 'Interpreter', 'none' );
grid on

%% Fit: 'fpn-od-poly'.
[xData, yData] = prepareCurveData( xo_deg, yo_pdk );

% Set up fittype and options.
ft = fittype( 'poly1' );

% Fit model to data.
[fitresult{5}, gof(5)] = fit( xData, yData, ft );

% Plot fit with data.
figure( 'Name', 'fpn-od-poly' );
h = plot( fitresult{5}, xData, yData );
legend( h, 'yo_pdk vs. xo_deg', 'fpn-od-poly', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'xo_deg', 'Interpreter', 'none' );
ylabel( 'yo_pdk', 'Interpreter', 'none' );
grid on

%% Fit: 'fpn-od-power'.
[xData, yData] = prepareCurveData( xo_deg, yo_pdk );

% Set up fittype and options.
ft = fittype( 'power1' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [1.91562934125414 -0.60357383325032];

% Fit model to data.
[fitresult{6}, gof(6)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'fpn-od-power' );
h = plot( fitresult{6}, xData, yData );
legend( h, 'yo_pdk vs. xo_deg', 'fpn-od-power', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'xo_deg', 'Interpreter', 'none' );
ylabel( 'yo_pdk', 'Interpreter', 'none' );
grid on

%% Fit: 'fpn-od-exp'.
[xData, yData] = prepareCurveData( xo_deg, yo_pdk );

% Set up fittype and options.
ft = fittype( 'exp1' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.StartPoint = [2.00105669193221 -0.133099795753079];

% Fit model to data.
[fitresult{7}, gof(7)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'fpn-od-exp' );
h = plot( fitresult{7}, xData, yData );
legend( h, 'yo_pdk vs. xo_deg', 'fpn-od-exp', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'xo_deg', 'Interpreter', 'none' );
ylabel( 'yo_pdk', 'Interpreter', 'none' );
grid on

%% Fit: 'fpn-od-gauss'.
[xData, yData] = prepareCurveData( xo_deg, yo_pdk );

% Set up fittype and options.
ft = fittype( 'gauss1' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.Lower = [-Inf -Inf 0];
opts.StartPoint = [0.966666666666667 3 5.73196919246772];

% Fit model to data.
[fitresult{8}, gof(8)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'fpn-od-gauss' );
h = plot( fitresult{8}, xData, yData );
legend( h, 'yo_pdk vs. xo_deg', 'fpn-od-gauss', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'xo_deg', 'Interpreter', 'none' );
ylabel( 'yo_pdk', 'Interpreter', 'none' );
grid on


